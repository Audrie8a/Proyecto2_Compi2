package main
import (
	"fmt"
	"math"
)

var P, H float64;
var stack [50000000]float64;
var heap [50000000]float64;
var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10 float64;
var t11, t12, t13, t14, t15, t16, t17, t18, t19, t20 float64;
var t21, t22, t23, t24, t25, t26, t27, t28, t29, t30 float64;
var t31, t32, t33, t34, t35, t36, t37, t38, t39, t40 float64;
var t41, t42, t43, t44, t45, t46, t47, t48, t49, t50 float64;
var t51, t52, t53, t54, t55, t56, t57, t58, t59, t60 float64;
var t61, t62, t63, t64, t65, t66, t67, t68, t69, t70 float64;
var t71, t72, t73, t74, t75, t76, t77, t78, t79, t80 float64;
var t81, t82, t83, t84, t85, t86, t87, t88, t89, t90 float64;
var t91, t92, t93, t94, t95, t96, t97, t98, t99, t100 float64;
var t101 float64;

// -----------------------------------------------------------
// FUNCIONES NATIVAS 
func printStr(){
	t3 = P + 1; // Puntero del parametro
	t4 = stack[int(t3)];
	L2:
	t5 = heap[int(t4)];
	if t5 == -1 { goto L1; }
	fmt.Printf("%c", int(t5));
	t4 = t4 + 1; //aumentar el contador del heap
	goto L2;
	L1:
	return; 
}
	func joinStr(){
	t14 = H; // Puntero, iniciara la nueva cadena
	t15 = P + 1; //Puntero, para el 1re parametro
	t17 = stack[int(t15)];
	t16 = P + 2; //Puntero, para el 2do parametro
	L4:
	t18 = heap[int(t17)]; // Valor de la cadena No.1
	if t18 == -1 { goto L5; }
	heap[int(H)] = t18;
	H = H + 1;
	t17 = t17 + 1; //Aumentar el contador heap
	goto L4;
	L5:
	t17 = stack[int(t16)];
	L6:
	t18 = heap[int(t17)]; // Valor de la cadena No.2
	if t18 == -1 { goto L3; }
	heap[int(H)] = t18;
	H = H + 1;
	t17 = t17 + 1; //Aumentar el contador heap
	goto L6;
	L3:
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	stack[int(P)] = t14; // Guardar el inicio de la cadena unida
	return; 
}
	func toUpperCase(){
	t28 = H;
	t29 = P + 1; 
	t30 = stack[int(t29)];
	L8:
	t31 = heap[int(t30)];
	if t31 == -1 { goto L7; }
	if t31 < 97 { goto L9; }
	if t31 > 122 { goto L9; }
	t31 = t31 - 32; //Convertir en mayuscula
	L9:
	heap[int(H)] = t31;
	H = H + 1;
	t30 = t30 + 1; 
	goto L8;
	L7:
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	stack[int(P)] = t28; // Guardar donde inica la nueva cadena
	return; 
}
	func toLowerCase(){
	t44 = H;
	t45 = P + 1; 
	t46 = stack[int(t45)];
	L11:
	t47 = heap[int(t46)];
	if t47 == -1 { goto L10; }
	if t47 < 65 { goto L12; }
	if t47 > 90 { goto L12; }
	t47 = t47 + 32; //Convertir en mayuscula
	L12:
	heap[int(H)] = t47;
	H = H + 1;
	t46 = t46 + 1; 
	goto L11;
	L10:
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	stack[int(P)] = t44; // Guardar donde inica la nueva cadena
	return; 
}
	func potenciaStr(){
	t91 = H; // Puntero, iniciara la nueva cadena
	t92 = P + 1; //Puntero, 1er parametro
	t93 = stack[int(t92)];
	t92 = t92 + 1; //Puntero, 2do parametro
	t94 = stack[int(t92)];
	t96 = 1; // Contador, compara con el expo
	t97 = t93; // Copia del incio del 1er param
	L16:
	t95 = heap[int(t93)];
	if t95 == -1 { goto L17; }
	heap[int(H)] = t95;
	H = H + 1;
	t93 = t93 + 1; //Aumentar puntero del heap
	goto L16;
	L17:
	if t96 == t94 { goto L15; }
	t96 = t96 + 1; //Aumentar contador de comparacion con el exp.
	t93 = t97; // Reiniciar puntero del heap
	goto L16;
	L15:
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	stack[int(P)] = t91; // Guardar donde inica la cadena unida
	return; 
}

// -----------------------------------------------------------
// FUNCIONES 
func StringFunction(){
	// PRIMITIVO: SALE COMPILADORES 2
	
	t0 = H;
	heap[int(H)] = 83; // S
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 108; // l
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 109; // m
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 108; // l
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 100; // d
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 50; // 2
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// ASIGNACION: STR1
	t1 = P + 1; 
	stack[int(t1)] = t0;
	// FIN ASIGNACION DE STR1
	// -----------------------------------------------------------
	
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: FUNCIONES STRING:
	
	t2 = H;
	heap[int(H)] = 70; // F
	H = H + 1;
	heap[int(H)] = 85; // U
	H = H + 1;
	heap[int(H)] = 78; // N
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 73; // I
	H = H + 1;
	heap[int(H)] = 79; // O
	H = H + 1;
	heap[int(H)] = 78; // N
	H = H + 1;
	heap[int(H)] = 69; // E
	H = H + 1;
	heap[int(H)] = 83; // S
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 83; // S
	H = H + 1;
	heap[int(H)] = 84; // T
	H = H + 1;
	heap[int(H)] = 82; // R
	H = H + 1;
	heap[int(H)] = 73; // I
	H = H + 1;
	heap[int(H)] = 78; // N
	H = H + 1;
	heap[int(H)] = 71; // G
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t6 = P + 2; 
	t6 = t6 + 1; 
	stack[int(t6)] = t2;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t7 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: CONCATENACION:
	
	t8 = H;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t9 = P + 2; 
	t9 = t9 + 1; 
	stack[int(t9)] = t8;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t10 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// -----------------------------------------------------------
	// ACCESO A VARIABLE: STR1
	t12 = P + 1; //Posicionar el puntero
	t11 = stack[int(t12)];
	// FIN ACCESO
	// -----------------------------------------------------------
	
	// PRIMITIVO:  C3D - SEGUNDO PROYECTO
	
	t13 = H;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 51; // 3
	H = H + 1;
	heap[int(H)] = 68; // D
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 45; // -
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = 117; // u
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 100; // d
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 80; // P
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 121; // y
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// PASO DE PARAMETROS
	t19 = P + 2; 
	// 1ER PARAMETRO
	t19 = t19 + 1; 
	stack[int(t19)] = t11;
	// 2DO PARAMETRO
	t19 = t19 + 1; 
	stack[int(t19)] = t13;
	// FIN PASO PARAMETROS
	// -----------------------------------------------------------
	// CAMBIO DE ENTORNO
	P = P + 2;
	joinStr();
	// GUARDAR RETURN DE LA FUNCION
	t20 = stack[int(P)];
	// REGRESO ENTORNO GLOBAL
	P = P - 2;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t21 = P + 2; 
	t21 = t21 + 1; 
	stack[int(t21)] = t20;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t22 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: UPPERCASE:
	
	t23 = H;
	heap[int(H)] = 85; // U
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t24 = P + 2; 
	t24 = t24 + 1; 
	stack[int(t24)] = t23;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t25 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// -----------------------------------------------------------
	// ACCESO A VARIABLE: STR1
	t27 = P + 1; //Posicionar el puntero
	t26 = stack[int(t27)];
	// FIN ACCESO
	// -----------------------------------------------------------
	
	
	t32 = P + 2; 
	t32 = t32 + 1; 
	stack[int(t32)] = t26;
	P = P + 2;
	toUpperCase();
	t33 = stack[int(P)];
	P = P - 2;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t34 = P + 2; 
	t34 = t34 + 1; 
	stack[int(t34)] = t33;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t35 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: LOWERCASE:
	
	t36 = H;
	heap[int(H)] = 76; // L
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 119; // w
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t37 = P + 2; 
	t37 = t37 + 1; 
	stack[int(t37)] = t36;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t38 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// -----------------------------------------------------------
	// ACCESO A VARIABLE: STR1
	t40 = P + 1; //Posicionar el puntero
	t39 = stack[int(t40)];
	// FIN ACCESO
	// -----------------------------------------------------------
	
	// PRIMITIVO:  SI SALE
	
	t41 = H;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 83; // S
	H = H + 1;
	heap[int(H)] = 73; // I
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 83; // S
	H = H + 1;
	heap[int(H)] = 65; // A
	H = H + 1;
	heap[int(H)] = 76; // L
	H = H + 1;
	heap[int(H)] = 69; // E
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// PASO DE PARAMETROS
	t42 = P + 2; 
	// 1ER PARAMETRO
	t42 = t42 + 1; 
	stack[int(t42)] = t39;
	// 2DO PARAMETRO
	t42 = t42 + 1; 
	stack[int(t42)] = t41;
	// FIN PASO PARAMETROS
	// -----------------------------------------------------------
	// CAMBIO DE ENTORNO
	P = P + 2;
	joinStr();
	// GUARDAR RETURN DE LA FUNCION
	t43 = stack[int(P)];
	// REGRESO ENTORNO GLOBAL
	P = P - 2;
	
	
	t48 = P + 2; 
	t48 = t48 + 1; 
	stack[int(t48)] = t43;
	P = P + 2;
	toLowerCase();
	t49 = stack[int(P)];
	P = P - 2;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t50 = P + 2; 
	t50 = t50 + 1; 
	stack[int(t50)] = t49;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t51 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: CONCATENACION + :
	
	t52 = H;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 43; // +
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t53 = P + 2; 
	t53 = t53 + 1; 
	stack[int(t53)] = t52;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t54 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: STRING * STRING
	
	t55 = H;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 42; // *
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t56 = P + 2; 
	t56 = t56 + 1; 
	stack[int(t56)] = t55;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t57 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// -----------------------------------------------------------
	// ACCESO A VARIABLE: STR1
	t59 = P + 1; //Posicionar el puntero
	t58 = stack[int(t59)];
	// FIN ACCESO
	// -----------------------------------------------------------
	
	// PRIMITIVO:  C3D - SEGUNDO PROYECTO
	
	t60 = H;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 51; // 3
	H = H + 1;
	heap[int(H)] = 68; // D
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 45; // -
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = 117; // u
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 100; // d
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 80; // P
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 121; // y
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// PASO DE PARAMETROS
	t61 = P + 2; 
	// 1ER PARAMETRO
	t61 = t61 + 1; 
	stack[int(t61)] = t58;
	// 2DO PARAMETRO
	t61 = t61 + 1; 
	stack[int(t61)] = t60;
	// FIN PASO PARAMETROS
	// -----------------------------------------------------------
	// CAMBIO DE ENTORNO
	P = P + 2;
	joinStr();
	// GUARDAR RETURN DE LA FUNCION
	t62 = stack[int(P)];
	// REGRESO ENTORNO GLOBAL
	P = P - 2;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t63 = P + 2; 
	t63 = t63 + 1; 
	stack[int(t63)] = t62;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t64 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: STRING * NUMERO ENTERO
	
	t65 = H;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 42; // *
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 117; // u
	H = H + 1;
	heap[int(H)] = 109; // m
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t66 = P + 2; 
	t66 = t66 + 1; 
	stack[int(t66)] = t65;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t67 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: ENTERO = 
	
	t68 = H;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 114; // r
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 61; // =
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	
	// -----------------------------------------------------------
	// DECLARAR STRUCT STRING()
	return; 
}
	func testambito(){
	
	// -----------------------------------------------------------
	// DECLARAR STRUCT STRING()
	// PRIMITIVO: USAC
	
	t69 = H;
	heap[int(H)] = 85; // U
	H = H + 1;
	heap[int(H)] = 115; // s
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	return; 
}
	func todas(){
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// -----------------------------------------------------------
	// ACCESO A VARIABLE: PARAMETRO
	t71 = P + 1; //Posicionar el puntero
	t70 = stack[int(t71)];
	// FIN ACCESO
	// -----------------------------------------------------------
	
	
	t72 = P + 2; 
	t72 = t72 + 1; 
	stack[int(t72)] = t70;
	P = P + 2;
	toLowerCase();
	t73 = stack[int(P)];
	P = P - 2;
	
	
	t74 = P + 2; 
	t74 = t74 + 1; 
	stack[int(t74)] = t73;
	P = P + 2;
	toUpperCase();
	t75 = stack[int(P)];
	P = P - 2;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t76 = P + 2; 
	t76 = t76 + 1; 
	stack[int(t76)] = t75;
	// -----------------------------------------------------------
	
	P = P + 2;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t77 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 2;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	return; 
}


// ===========================================================
// MAIN 
// ===========================================================
func main() {
	 P = 0; // Puntero Stack 
	 H = 0; //Puntero Heap 
	
	// -----------------------------------------------------------
	// LLAMADO A FUNCION: STRINGFUNCTION
	P = P + 0;
	StringFunction();
	t78 = stack[int(P)];
	P = P - 0;
	// RECUPERAR TEMPORALES
	
	t79 = P + 0; 
	t78 = stack[int(t79)];
	
	// FIN DE RECUPERACION
	// FIN LLAMADO A FUNCION
	// -----------------------------------------------------------
	
	
	// -----------------------------------------------------------
	// LLAMADO A FUNCION: TESTAMBITO
	// GUARDAR TEMPORALES
	
	t80 = P + 0; 
	stack[int(t80)] = t78;
	
	// FIN DE GUARDAR TEMPORALES
	P = P + 1;
	testambito();
	t81 = stack[int(P)];
	P = P - 1;
	// RECUPERAR TEMPORALES
	
	t82 = P + 0; 
	t78 = stack[int(t82)];
	t82 = t82 + 1; 
	t81 = stack[int(t82)];
	
	// FIN DE RECUPERACION
	// FIN LLAMADO A FUNCION
	// -----------------------------------------------------------
	
	
	// -----------------------------------------------------------
	// LLAMADO A FUNCION: TODAS
	// GUARDAR TEMPORALES
	
	t83 = P + 0; 
	stack[int(t83)] = t78;
	t83 = t83 + 1; 
	stack[int(t83)] = t81;
	
	// FIN DE GUARDAR TEMPORALES
	// PRIMITIVO: HOY GANO COMPI2
	
	t84 = H;
	heap[int(H)] = 104; // h
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 121; // y
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 103; // g
	H = H + 1;
	heap[int(H)] = 97; // a
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 79; // O
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 109; // m
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 50; // 2
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	t85 = P + 3; 
	stack[int(t85)] = t84;
	P = P + 2;
	todas();
	t85 = stack[int(P)];
	P = P - 2;
	// RECUPERAR TEMPORALES
	
	t86 = P + 0; 
	t78 = stack[int(t86)];
	t86 = t86 + 1; 
	t81 = stack[int(t86)];
	
	// FIN DE RECUPERACION
	// FIN LLAMADO A FUNCION
	// -----------------------------------------------------------
	
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: REPETICION:
	
	t87 = H;
	heap[int(H)] = 82; // R
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 101; // e
	H = H + 1;
	heap[int(H)] = 116; // t
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 99; // c
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 110; // n
	H = H + 1;
	heap[int(H)] = 58; // :
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t88 = P + 0; 
	t88 = t88 + 1; 
	stack[int(t88)] = t87;
	// -----------------------------------------------------------
	
	P = P + 0;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t89 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 0;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------
	
	// -----------------------------------------------------------
	// INICIO PRINT
	// PRIMITIVO: COMPI2 
	
	t90 = H;
	heap[int(H)] = 67; // C
	H = H + 1;
	heap[int(H)] = 111; // o
	H = H + 1;
	heap[int(H)] = 109; // m
	H = H + 1;
	heap[int(H)] = 112; // p
	H = H + 1;
	heap[int(H)] = 105; // i
	H = H + 1;
	heap[int(H)] = 50; // 2
	H = H + 1;
	heap[int(H)] = 32; //  
	H = H + 1;
	heap[int(H)] = -1; // FIN CADENA
	H = H + 1;
	
	// PRIMITIVO: 4
	// -----------------------------------------------------------
	// PASO DE PARAMETROS
	t98 = P + 0; 
	// 1ER PARAMETRO
	t98 = t98 + 1; 
	stack[int(t98)] = t90;
	// 2DO PARAMETRO
	t98 = t98 + 1; 
	stack[int(t98)] = 4;
	// FIN PASO DE PARAMETROS
	// -----------------------------------------------------------
	// CAMBIO DE ENTORNO
	P = P + 0;
	potenciaStr();
	// GUARDAR EL RETURN DE LA FUNCION
	t99 = stack[int(P)];
	P = P - 0;
	
	// -----------------------------------------------------------
	// GUARDAR VARIABLE EN STACK
	t100 = P + 0; 
	t100 = t100 + 1; 
	stack[int(t100)] = t99;
	// -----------------------------------------------------------
	
	P = P + 0;
	printStr();
	
	// GUARDAR RETURN DE LA FUNCION
	t101 = stack[int(P)];
	// REGRESO DE ENTORNO
	P = P - 0;
	
	fmt.Printf("%c", int(10));
	// FIN PRINT
	// -----------------------------------------------------------

}
