package main;
import("fmt");
var P, H float64;
var stack[78000]float64;
var heap[34]float64;
var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46 float64;

func printString(){
 	t0=P;
	t1=stack[int(t0)];
	L2:
		t2=heap[int(t1)]; 
		if t2 == -1 {goto L0;}
		goto L1;
	L1:
		fmt.Printf("%c", int(t2));
 		t1=t1+1; 
		goto L2;
	L0:
		return;
}
func printBooleans(){
 	t23=P;
	t24=stack[int(t23)];
	t23=t24+0;
		if t23 == 1 {goto t25;}
		goto t26;
	t25:
		fmt.Printf("%c", 116); //t
		fmt.Printf("%c", 114); //r
		fmt.Printf("%c", 117); //u
		fmt.Printf("%c", 101); //e
		 goto t27;
	t26:
		fmt.Printf("%c", 102); //f
		fmt.Printf("%c", 97); //a
		fmt.Printf("%c", 108); //l
		fmt.Printf("%c", 115); //s
		fmt.Printf("%c", 101); //e
		 goto t27;
	t27:
		return;
}
func potenciaString(){
	t12=0;
	t13=stack[int(1)];
	L3:
		t11=P;
		stack[int(0)]=t13;
		P =0;
		printString();
		t14=stack[int(2)];
		P =1;
		t12 = t12 + 1;
		if t12 < t14 {goto L3;}
		 goto L4;
	L4:
		return;
}

func Menor(){
	t17=P+0;
	t18=stack[int(t17)];
	t17=t17+1;
	t19=stack[int(t17)];
	t17=t18;
	 if t17<t19{goto L5;}
	goto L6;
	L5:
		t20=1+0;
		 stack[int(6)]=t20;
		 goto L7;
	L6:
		t20=0+0;
		 stack[int(6)]=t20;
		 goto L7;
	L7:
		 return;
}
func MenorQue(){
	t32=P+0;
	t33=stack[int(t32)];
	t32=t32+1;
	t34=stack[int(t32)];
	t32=t33;
	 if t32<=t34{goto L8;}
	goto L9;
	L8:
		t35=1+0;
		 stack[int(10)]=t35;
		 goto L10;
	L9:
		t35=0+0;
		 stack[int(10)]=t35;
		 goto L10;
	L10:
		 return;
}
func IgualIgual(){
	t40=P+0;
	t41=stack[int(t40)];
	t40=t40+1;
	t42=stack[int(t40)];
	t40=t41;
	 if t40==t42{goto L11;}
	goto L12;
	L11:
		t43=1+0;
		 stack[int(13)]=t43;
		 goto L13;
	L12:
		t43=0+0;
		 stack[int(13)]=t43;
		 goto L13;
	L13:
		 return;
}
func main(){
t3=H;

heap[int(H)]=104;
H = H + 1;
heap[int(H)]=111;
H = H + 1;
heap[int(H)]=108;
H = H + 1;
heap[int(H)]=97;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t4=0;

stack[int(t4)]=t3;

P = P + 0;
printString();

P = P - 0;
fmt.Printf("%c",10);
t5=H;

heap[int(H)]=104;
H = H + 1;
heap[int(H)]=111;
H = H + 1;
heap[int(H)]=108;
H = H + 1;
heap[int(H)]=97;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t6=0;

stack[int(t6)]=t5;

P = P + 0;
printString();

P = P - 0;
fmt.Printf("%c",10);
t7=H;

heap[int(H)]=104;
H = H + 1;
heap[int(H)]=111;
H = H + 1;
heap[int(H)]=108;
H = H + 1;
heap[int(H)]=97;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t8=0;

stack[int(t8)]=t7;

P = P + 0;
printString();

P = P - 0;
fmt.Printf("%c",10);
t9=H;

heap[int(H)]=104;
H = H + 1;
heap[int(H)]=111;
H = H + 1;
heap[int(H)]=108;
H = H + 1;
heap[int(H)]=97;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t10=0;

stack[int(t10)]=t9;

P = P + 0;
printString();

P = P - 0;
fmt.Printf("%c",10);
t15=H;

heap[int(H)]=104;
H = H + 1;
heap[int(H)]=111;
H = H + 1;
heap[int(H)]=108;
H = H + 1;
heap[int(H)]=97;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t16 = 1  ;
stack[int(t16)] = t15;
t16 = 2  ;
stack[int(t16)] = 12;
P = P + 1;
potenciaString();
P = P - 1;
fmt.Printf("%c",10);
t21 = 4  ;
stack[int(t21)] = 6;
t21 = 5  ;
stack[int(t21)] = 3;
P = P + 4;
Menor();
t22 = stack[int(6)];
P = P - 4;
t28=7;

stack[int(t28)]=t22;

P = P + 7;
printBooleans();

P = P - 7;
t29=H;

heap[int(H)]=32;
H = H + 1;
heap[int(H)]=65;
H = H + 1;
heap[int(H)]=117;
H = H + 1;
heap[int(H)]=100;
H = H + 1;
heap[int(H)]=114;
H = H + 1;
heap[int(H)]=105;
H = H + 1;
heap[int(H)]=101;
H = H + 1;
heap[int(H)]=32;
H = H + 1;
heap[int(H)]=-1;
H = H + 1;
t30=0;

stack[int(t30)]=t29;

P = P + 0;
printString();

P = P - 0;
t31 = 5 + 3;
t36 = 8  ;
stack[int(t36)] = t31;
t36 = 9  ;
stack[int(t36)] = 12;
P = P + 8;
MenorQue();
t37 = stack[int(10)];
P = P - 8;
t38=7;

stack[int(t38)]=t37;

P = P + 7;
printBooleans();

P = P - 7;
t39 = 1 + 1;
t44 = 11  ;
stack[int(t44)] = t39;
t44 = 12  ;
stack[int(t44)] = 2;
P = P + 11;
IgualIgual();
t45 = stack[int(13)];
P = P - 11;
t46=7;

stack[int(t46)]=t45;

P = P + 7;
printBooleans();

P = P - 7;
fmt.Printf("%c",10);
}
